#!python
#
# Script for command line compilation via the MSVC compiler on Windows.
# Uses the MSBuild.exe executable (provided alongside Visual Studio).
#
# Usage:
#   vsbuild <solution path>
#

import subprocess
import argparse
import os
import mmap
import re

# TODO: probably want a better way of differentiating between tiers
msbuild_path_dict = {
    17: {
        r"C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\amd64\MSBuild.exe"
    },
    15: {
        r"C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin\amd64\MSBuild.exe",
        r"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\amd64\MSBuild.exe"
    },
    14: {
        r"C:\Program Files (x86)\MSBuild\14.0\Bin\MSBuild.exe"
    }
}

def find_msbuild(version):
    if version in msbuild_path_dict:
        for tier_path in msbuild_path_dict[version]:
            # TODO: have way of specifying paid tier if multiple installed?
            if os.path.exists(tier_path):
                return (True, version, tier_path)

    return (False, 0, "")

def auto_find_msbuild(version):
    for (key, val) in msbuild_path_dict.items():
        for tier_path in val:
            if os.path.exists(tier_path):
                return (True, key, val)
    
    return (False, 0, "")

def parse_solution_version(solution_path):
    with open(solution_path, 'rb', 0) as file:
        mm = mmap.mmap(file.fileno(), 0, access=mmap.ACCESS_READ)
        line = mm.readline().decode("utf-8").split()
        line = mm.readline().decode("utf-8").split()
        line = mm.readline().decode("utf-8").split()
        line = [int(i) for i in line if i.isdigit()]

        if not line:
            return 0

        return line[0]

def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument('-d', '--debug', action="store_true", default=False, help='compile with debug mode')
    parser.add_argument('-w', '--warnings', action="store_true", default=False, help='enable showing warning messages')
    parser.add_argument('-a', '--arch', choices=["Win32", "x64"], default="x64", help='target architecture')
    parser.add_argument('-v', '--version', type=int, choices=[14, 15, 17], default=17, help='version of visual studio')
    parser.add_argument('-r', '--rebuild', action="store_true", default=False, help='should do a full rebuild')
    parser.add_argument('solution_path', help='path to VS solution file')

    return parser.parse_args()

def red(text):
    print('\033[31m', text, '\033[0m', sep='')

def green(text):
    print('\033[32m', text, '\033[0m', sep='')

def yellow(text):
    print('\033[33m', text, '\033[0m', sep='')

def main():
    args = parse_args()

    # TODO: automatically interprut if x64/win32

    if not os.path.isfile(args.solution_path):
        red("Not valid solution path: " + args.solution_path)
        exit()

    if not args.version:
        solution_version = parse_solution_version(args.solution_path)
        (found, found_version, msbuild) = find_msbuild(solution_version)

        if found:
            (found, found_version, msbuild) = auto_find_msbuild(solution_version)
            if not found:
                red("Couldn't find path to any version of MSBuild.exe")
                exit()
            else:
                yellow("Couldn't find path to version " + str(solution_version) + " of MSBuild.exe")
                yellow("Defaulting to version " + str(found_version))
    else:
        (found, found_version, msbuild) = find_msbuild(args.version)
        if not found:
            red("Couldn't find path to MSBuild.exe for version: " + str(args.version))
            red("MSBuild.exe search path: " + msbuild_path_dict[args.version])
            exit()

    # TODO: there should be an option to print out errors in a vim-consumable way
    # (vim's jump-to-line syntax is: vim <filename> +<line number>)

    command = [msbuild]
    command.append(args.solution_path)
    command.append("/maxcpucount")  # use all cores for building
    command.append("/nologo")
    command.append("/v:q")  # verbose = quiet
    command.append("/p:Configuration=" + ("Release", "Debug")[args.debug])

    # TODO: would be nice to specify custom Platform here somehow...
    # would probably need to parse the solution file for the platform name...
    #command.append("/p:Platform=" + args.arch)
    #command.append("/p:PlatformToolset=" + ("v141", "v140")[found_version == 14])

    if args.rebuild:
        command.append("/t:rebuild")

    print("================================================")
    print("Solution Path: \t\t" + args.solution_path)
    print("Target Platform: \t" + args.arch)
    print("Configuration: \t\t" + ("Release", "Debug")[args.debug])
    print("Visual Studio Version: \t" + str(found_version))
    print("cmd: " + ' '.join(command))
    print("================================================", flush=True)

    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

    # loop through each line of output from the compiler and detect if its worth printing
    count = 0
    while True:
        nextline = process.stdout.readline().decode("utf-8")
        is_valid_message = nextline and (nextline.isspace() is False)

        if not args.warnings:
            is_valid_message = is_valid_message and ("warning C" not in nextline)

        if is_valid_message:
            count += 1
            # strips the ending details about which .vcxproj for error
            nextline = nextline[:nextline.rfind("[")]

            # TODO: find regex that works for all inputs
            # strips global file path for file in question
            #nextline = re.search('((\w|\d|\_|\-)*(\\(?=.(?!\\))+)*\.).*', nextline)

            if nextline != None:
                # TODO: maybe add text wrapping
                print(nextline)

        if process.poll() is not None:
            break

    if process.returncode != 0:
        print("================================================")
        print("Total errors: " + str(count))
        red("Build Failed!")
        exit(1)
    else:
        green("Build Successful!")

if __name__ == "__main__":
    main()

